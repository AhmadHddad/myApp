{"version":3,"sources":["Component/Layout/Pages/Profile/Profile.module.css","Component/Layout/Layout.module.css","assets/me.png","Component/Layout/Pages/Profile/Profile.js","Component/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","props","Fragment","className","classes","h1","hr1","myImg","src","alt","h2","h3","hr2","aboutME","Layout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,IAAM,qBAAqB,GAAK,oBAAoB,GAAK,oBAAoB,GAAK,oBAAoB,IAAM,qBAAqB,QAAU,2B,kBCA5LD,EAAOC,QAAU,CAAC,OAAS,yB,gBCD3BD,EAAOC,QAAU,IAA0B,gC,+MCqB5BC,EAjBC,SAACC,GACb,OACI,kBAAC,IAAMC,SAAP,KACI,wBAAIC,UAAWC,IAAQC,IAAvB,WACA,wBAAIF,UAAWC,IAAQE,MAC3B,yBAAKH,UAAWC,IAAQG,MAAOC,IAAKD,IAAOE,IAAI,OAC/C,wBAAIN,UAAWC,IAAQM,IAAvB,eAJA,IAI4C,wBAAIP,UAAWC,IAAQO,IAAvB,sBAC5C,wBAAIR,UAAWC,IAAQQ,MACvB,uBAAGT,UAAWC,IAAQS,SAAtB,0UCAOC,EARA,SAACb,GACZ,OACI,yBAAKE,UAAWC,IAAQU,QACxB,kBAAC,EAAD,QCMOC,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCIca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d8ecae58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"myImg\":\"Profile_myImg__17bCm\",\"hr1\":\"Profile_hr1__11vJi\",\"h1\":\"Profile_h1__5M6ay\",\"h2\":\"Profile_h2__F32XW\",\"h3\":\"Profile_h3__NOb73\",\"hr2\":\"Profile_hr2__180u2\",\"aboutME\":\"Profile_aboutME__2H_3P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__2W8Bi\"};","module.exports = __webpack_public_path__ + \"static/media/me.85c9f4fe.png\";","import React from 'react'\r\nimport classes from './Profile.module.css';\r\nimport myImg from '../../../../assets/me.png'\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h1 className={classes.h1}>PROFILE</h1>\r\n            <hr className={classes.hr1}/>\r\n        <img className={classes.myImg} src={myImg} alt=\"Me\"/>\r\n        <h2 className={classes.h2}>Ahmad Hddad</h2> <h3 className={classes.h3}>Software Developer</h3>\r\n        <hr className={classes.hr2}/>\r\n        <p className={classes.aboutME}>\r\n            Hi, welcome to my page, I am an enthusiastic developer, I developed many projects and collaborate with others. I love working with other developers and writing clean maintainable code. Always keeping up with new technologies and improving my self. I have experience in many technologies and including front-end and back-end.\r\n\r\n        </p>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport classes from './Layout.module.css';\r\nimport Profile from \"./Pages/Profile/Profile\";\r\n\r\nconst Layout = (props) => {\r\n    return (\r\n        <div className={classes.Layout}>\r\n        <Profile/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\nimport './App.css';\r\n// import Tab from \"./Component/Layout/Tabs/Tab/Tab\";\r\nimport Layout from \"./Component/Layout/Layout\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Layout/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}